import os
import re
import zipfile

def search_odt_files(search_string, directory):
    # Initialize a list to store the matching files
    matching_files = []

    # Iterate over all the files in the directory
    for root, dirs, files in os.walk(directory):
        for file in files:
            # Check if the file is an .odt file
            if file.endswith(".odt"):
                # Open the .odt file as a zip archive
                with zipfile.ZipFile(os.path.join(root, file), "r") as zip_archive:
                    # Extract the text content of the file
                    with zip_archive.open("content.xml") as f:
                        # Read the contents of the file
                        contents = f.read()
                        # Decode the contents from bytes to a string
                        contents_str = contents.decode()
                        # Use a regular expression to search for the search string
                        if re.search(search_string, contents_str, re.IGNORECASE):
                            # If the search string is found, add the file to the list of matching files
                            matching_files.append(os.path.join(root, file))
    
    # Return the list of matching files
    return matching_files

# Get the current working directory
directory = os.getcwd()

# Example usage
search_string = input("Search files:")
matching_files = search_odt_files(search_string, directory)
#print(matching_files)

for x in matching_files:
    file = x.split('/home/andrey/Desktop/Analysis/')[1]
    print()
    from IPython.display import HTML

    # Define the string you want to print
    string = file.split('.odt')[0]

    # Set the font size of the string using the CSS 'font-size' property
    html = "".join([f"<span style='font-size: 30px;'>{c}</span>" for c in string])

    # Display the HTML object
    display(HTML(html))
    print()
    
    import zipfile
    from lxml import etree

    # Open the .odt file as a zip archive
    with zipfile.ZipFile(file, "r") as zip_archive:
        # Extract the text content of the file
        with zip_archive.open("content.xml") as f:
            # Read the contents of the file
            contents = f.read()
            # Parse the XML content of the file
            xml_root = etree.fromstring(contents)

    # Find all the text:p elements in the XML content (these represent paragraphs in the document)
    paragraphs = xml_root.findall(".//text:p", xml_root.nsmap)

    # Extract the text content of the paragraphs
    for paragraph in paragraphs:
        print(paragraph.text)
        print()
